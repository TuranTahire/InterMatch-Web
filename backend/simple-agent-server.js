const express = require('express');
const cors = require('cors');
const axios = require('axios');

const app = express();
const PORT = 5001;

app.use(cors());
app.use(express.json());

// AI API Keys
const GEMINI_API_KEY = 'AIzaSyD3TUH96n93daZQMAgoAE9IvAIq7EVcr5I';

// Simple Agent System
class SimpleRealAgent {
  constructor() {
    this.conversationHistory = [];
    this.isInitialized = false;
  }

  async initialize() {
    try {
      console.log('ü§ñ Simple Real Agent ba≈ülatƒ±lƒ±yor...');
      
      // Test API connection
      const testResponse = await this.callGeminiAPI('Merhaba, test mesajƒ±');
      
      if (testResponse) {
        this.isInitialized = true;
        console.log('‚úÖ Simple Real Agent ba≈üarƒ±yla ba≈ülatƒ±ldƒ±');
        return true;
      } else {
        console.error('‚ùå API baƒülantƒ± testi ba≈üarƒ±sƒ±z');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Agent ba≈ülatma hatasƒ±:', error);
      return false;
    }
  }

  async callGeminiAPI(prompt) {
    try {
      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`,
        {
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        },
        {
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );

      return response.data.candidates[0].content.parts[0].text;
    } catch (error) {
      console.error('‚ùå Gemini API hatasƒ±:', error.response?.data || error.message);
      return null;
    }
  }

  async runTask(task, context = {}) {
    try {
      if (!this.isInitialized) {
        await this.initialize();
      }

      console.log('ü§ñ Simple Agent g√∂revi ba≈ülatƒ±lƒ±yor:', task);

      let prompt = '';
      
      // Task tipine g√∂re √∂zel prompt olu≈ütur
      if (task.toLowerCase().includes('cv') && task.toLowerCase().includes('analiz')) {
        prompt = this.createCVAnalysisPrompt(context);
      } else if (task.toLowerCase().includes('m√ºlakat') || task.toLowerCase().includes('interview')) {
        prompt = this.createInterviewPrepPrompt(context);
      } else if (task.toLowerCase().includes('√∂n yazƒ±') || task.toLowerCase().includes('cover letter')) {
        prompt = this.createCoverLetterPrompt(context);
      } else if (task.toLowerCase().includes('email') || task.toLowerCase().includes('mail')) {
        prompt = this.createEmailTemplatePrompt(context);
      } else if (task.toLowerCase().includes('beceri') || task.toLowerCase().includes('skill')) {
        prompt = this.createSkillGapPrompt(context);
      } else {
        // Default: CV analizi
        prompt = this.createCVAnalysisPrompt(context);
      }

      const result = await this.callGeminiAPI(prompt);
      
      if (result) {
        // Try to parse as JSON, if not return as text
        try {
          const jsonResult = JSON.parse(result);
          return { output: jsonResult, task: task };
        } catch {
          return { output: result, task: task };
        }
      } else {
        return { error: 'API yanƒ±tƒ± alƒ±namadƒ±' };
      }
    } catch (error) {
      console.error('‚ùå Agent g√∂revi hatasƒ±:', error);
      return { error: error.message };
    }
  }

  createCVAnalysisPrompt(context) {
    return `
    Sen bir kariyer danƒ±≈ümanƒ±sƒ±n. CV analizi konusunda uzmansƒ±n.
    
    CV: ${context.cvText || 'CV metni yok'}
    ƒ∞≈ü ƒ∞lanƒ±: ${context.jobText || 'ƒ∞≈ü ilanƒ± yok'}
    
    Bu CV'yi detaylƒ± analiz et ve ≈üu bilgileri JSON formatƒ±nda d√∂nd√ºr:
    
    {
      "strengths": ["g√º√ßl√º yan 1", "g√º√ßl√º yan 2", "g√º√ßl√º yan 3"],
      "weaknesses": ["eksiklik 1", "eksiklik 2", "eksiklik 3"],
      "recommendations": ["√∂neri 1", "√∂neri 2", "√∂neri 3", "√∂neri 4", "√∂neri 5"],
      "compatibilityScore": 85,
      "priorityActions": ["eylem 1", "eylem 2", "eylem 3"],
      "skillGaps": ["eksik beceri 1", "eksik beceri 2"],
      "experienceMatch": "uygun/orta/uygun deƒüil",
      "overallAssessment": "Bu CV'nin genel deƒüerlendirmesi..."
    }
    
    Sadece JSON d√∂nd√ºr, ba≈üka a√ßƒ±klama ekleme.
    `;
  }

  createInterviewPrepPrompt(context) {
    return `
    Sen bir m√ºlakat ko√ßusun. Bu pozisyon i√ßin kapsamlƒ± m√ºlakat hazƒ±rlƒ±ƒüƒ± olu≈ütur.
    
    Pozisyon: ${context.position || 'Pozisyon belirtilmemi≈ü'}
    CV: ${context.cvText || 'CV metni yok'}
    ƒ∞≈ü ƒ∞lanƒ±: ${context.jobText || 'ƒ∞≈ü ilanƒ± yok'}
    
    JSON formatƒ±nda ≈üu bilgileri d√∂nd√ºr:
    
    {
      "expectedQuestions": ["soru 1", "soru 2", "soru 3", "soru 4", "soru 5"],
      "preparedAnswers": ["cevap 1", "cevap 2", "cevap 3", "cevap 4", "cevap 5"],
      "attentionPoints": ["nokta 1", "nokta 2", "nokta 3"],
      "questionsToAsk": ["soru 1", "soru 2", "soru 3"],
      "behavioralTips": ["ipucu 1", "ipucu 2", "ipucu 3"],
      "dressCode": "Giyim √∂nerisi",
      "bodyLanguage": "Beden dili √∂nerileri",
      "followUpStrategy": "Takip stratejisi"
    }
    
    Sadece JSON d√∂nd√ºr.
    `;
  }

  createCoverLetterPrompt(context) {
    return `
    Sen bir √∂n yazƒ± uzmanƒ±sƒ±n. Profesyonel ve etkili √∂n yazƒ± olu≈ütur.
    
    ≈ûirket: ${context.companyName || '≈ûirket adƒ± belirtilmemi≈ü'}
    Pozisyon: ${context.position || 'Pozisyon belirtilmemi≈ü'}
    CV: ${context.cvText || 'CV metni yok'}
    ƒ∞≈ü ƒ∞lanƒ±: ${context.jobText || 'ƒ∞≈ü ilanƒ± yok'}
    
    Bu bilgilere g√∂re profesyonel bir √∂n yazƒ± olu≈ütur:
    
    - Ki≈üisel ve samimi ton kullan
    - CV'deki deneyimleri vurgula
    - ≈ûirkete deƒüer katacaƒüƒ±nƒ± belirt
    - √áaƒürƒ± eylemi (call-to-action) i√ßersin
    - 3-4 paragraf olsun
    - T√ºrk√ße yaz
    
    Sadece √∂n yazƒ± metnini d√∂nd√ºr, ba≈ülƒ±k ekleme.
    `;
  }

  createEmailTemplatePrompt(context) {
    return `
    Sen bir email yazma uzmanƒ±sƒ±n. Profesyonel ba≈üvuru emaili olu≈ütur.
    
    ≈ûirket: ${context.companyName || '≈ûirket adƒ± belirtilmemi≈ü'}
    Pozisyon: ${context.position || 'Pozisyon belirtilmemi≈ü'}
    CV: ${context.cvText || 'CV metni yok'}
    ƒ∞≈ü ƒ∞lanƒ±: ${context.jobText || 'ƒ∞≈ü ilanƒ± yok'}
    
    JSON formatƒ±nda d√∂nd√ºr:
    
    {
      "subject": "Etkili konu ba≈ülƒ±ƒüƒ±",
      "body": "Email g√∂vdesi - selamlama, ilgi, deneyim, deƒüer, g√∂r√º≈üme talebi, te≈üekk√ºr",
      "tips": ["ipucu 1", "ipucu 2", "ipucu 3"]
    }
    
    Sadece JSON d√∂nd√ºr.
    `;
  }

  createSkillGapPrompt(context) {
    return `
    Sen bir beceri analiz uzmanƒ±sƒ±n. CV ve i≈ü ilanƒ± arasƒ±ndaki beceri bo≈üluklarƒ±nƒ± analiz et.
    
    CV: ${context.cvText || 'CV metni yok'}
    ƒ∞≈ü ƒ∞lanƒ±: ${context.jobText || 'ƒ∞≈ü ilanƒ± yok'}
    
    JSON formatƒ±nda d√∂nd√ºr:
    
    {
      "currentSkills": ["beceri 1", "beceri 2", "beceri 3"],
      "requiredSkills": ["beceri 1", "beceri 2", "beceri 3"],
      "missingSkills": ["beceri 1", "beceri 2", "beceri 3"],
      "learningPriorities": ["√∂ncelik 1", "√∂ncelik 2", "√∂ncelik 3"],
      "learningResources": {
        "beceri1": ["kaynak 1", "kaynak 2"],
        "beceri2": ["kaynak 1", "kaynak 2"],
        "beceri3": ["kaynak 1", "kaynak 2"]
      },
      "timeEstimate": "Tahmini √∂ƒürenme s√ºresi",
      "difficultyLevel": "Zorluk seviyesi"
    }
    
    Sadece JSON d√∂nd√ºr.
    `;
  }

  async comprehensiveAnalysis(cvText, jobDescription, companyName = "", position = "") {
    try {
      const context = { cvText, jobText: jobDescription, companyName, position };
      
      // Kapsamlƒ± analiz i√ßin t√ºm task'larƒ± √ßalƒ±≈ütƒ±r
      const results = {
        cvAnalysis: await this.runTask('CV Analizi', context),
        skillGap: await this.runTask('Beceri Analizi', context),
        interviewPrep: await this.runTask('M√ºlakat Hazƒ±rlƒ±ƒüƒ±', context),
        coverLetter: await this.runTask('√ñn Yazƒ±', context),
        emailTemplate: await this.runTask('Email ≈ûablonu', context)
      };

      return { output: results, type: 'comprehensive_analysis' };
    } catch (error) {
      return { error: `Kapsamlƒ± analiz hatasƒ±: ${error.message}` };
    }
  }

  async getConversationHistory() {
    return this.conversationHistory;
  }

  async clearMemory() {
    this.conversationHistory = [];
    console.log('‚úÖ Agent belleƒüi temizlendi');
  }
}

// Global agent instance
let simpleAgent = null;

// Initialize agent
async function initializeAgent() {
  try {
    simpleAgent = new SimpleRealAgent();
    const success = await simpleAgent.initialize();
    if (success) {
      console.log('‚úÖ Simple Real Agent backend\'de ba≈üarƒ±yla ba≈ülatƒ±ldƒ±');
    } else {
      console.error('‚ùå Agent ba≈ülatma ba≈üarƒ±sƒ±z');
    }
  } catch (error) {
    console.error('‚ùå Agent ba≈ülatma hatasƒ±:', error);
  }
}

// API Routes
app.get('/api/health', (req, res) => {
  res.json({
    status: 'healthy',
    message: 'Simple Real Agent Server √ßalƒ±≈üƒ±yor',
    timestamp: new Date().toISOString()
  });
});

app.post('/api/agent/task', async (req, res) => {
  try {
    const { task, context } = req.body;
    
    if (!simpleAgent) {
      await initializeAgent();
    }
    
    if (!simpleAgent) {
      return res.status(500).json({ error: 'Agent ba≈ülatƒ±lamadƒ±' });
    }
    
    const result = await simpleAgent.runTask(task, context);
    res.json(result);
  } catch (error) {
    console.error('‚ùå Agent task hatasƒ±:', error);
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/agent/comprehensive-analysis', async (req, res) => {
  try {
    const { cvText, jobDescription, companyName, position } = req.body;
    
    if (!simpleAgent) {
      await initializeAgent();
    }
    
    if (!simpleAgent) {
      return res.status(500).json({ error: 'Agent ba≈ülatƒ±lamadƒ±' });
    }
    
    const result = await simpleAgent.comprehensiveAnalysis(cvText, jobDescription, companyName, position);
    res.json(result);
  } catch (error) {
    console.error('‚ùå Comprehensive analysis hatasƒ±:', error);
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/agent/history', async (req, res) => {
  try {
    if (!simpleAgent) {
      return res.json([]);
    }
    
    const history = await simpleAgent.getConversationHistory();
    res.json(history);
  } catch (error) {
    console.error('‚ùå History alma hatasƒ±:', error);
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/agent/clear-memory', async (req, res) => {
  try {
    if (!simpleAgent) {
      return res.json({ message: 'Agent yok' });
    }
    
    await simpleAgent.clearMemory();
    res.json({ message: 'Bellek temizlendi' });
  } catch (error) {
    console.error('‚ùå Memory temizleme hatasƒ±:', error);
    res.status(500).json({ error: error.message });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`ü§ñ Simple Real Agent Server √ßalƒ±≈üƒ±yor: http://localhost:${PORT}`);
  console.log(`üìã Health check: http://localhost:${PORT}/api/health`);
  
  // Initialize agent on startup
  initializeAgent();
}); 