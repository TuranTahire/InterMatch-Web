import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import fileUpload from "express-fileupload";
import axios from "axios";
import * as cheerio from "cheerio";
import { customAgentManager } from "./managers/CustomAgentManager.js";

// Environment variables
dotenv.config();

const app = express();

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(fileUpload({
  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB limit
  useTempFiles: true,
  tempFileDir: '/tmp/'
}));

// Test job description for development
const TEST_JOB_DESCRIPTION = `
Senior Software Engineer - Full Stack Development

We are looking for a talented Senior Software Engineer to join our dynamic team. You will be responsible for developing and maintaining web applications using modern technologies.

Requirements:
- 5+ years of experience in software development
- Strong proficiency in JavaScript, React, Node.js
- Experience with Python, Java, or similar languages
- Knowledge of SQL and database design
- Experience with AWS, Docker, Kubernetes
- Understanding of REST APIs and GraphQL
- Experience with Git and version control
- Knowledge of Agile methodologies
- Strong problem-solving skills
- Excellent communication abilities

Responsibilities:
- Develop and maintain web applications
- Collaborate with cross-functional teams
- Write clean, maintainable code
- Participate in code reviews
- Mentor junior developers
- Contribute to technical architecture decisions

Nice to have:
- Experience with machine learning
- Knowledge of DevOps practices
- Experience with microservices architecture
- Understanding of data analysis
- Project management skills

We offer competitive salary, flexible working hours, and opportunities for professional growth.
`;

// Improved scraping function
async function scrapeJobFromUrl(url) {
  try {
    console.log('üîç Scraping URL:', url);
    
    // For testing, return test job description
    if (url.includes('test') || url.includes('example')) {
      console.log('üìã Using test job description');
      return TEST_JOB_DESCRIPTION;
    }
    
    // LinkedIn i√ßin √∂zel handling
    if (url.includes('linkedin.com')) {
      return await scrapeLinkedInJob(url);
    }
    
    // Genel scraping
    const response = await axios.get(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Cache-Control': 'max-age=0'
      },
      timeout: 20000
    });

    const html = response.data;
    const $ = cheerio.load(html);
    
    // Genel job posting extraction
    let jobText = '';
    
    const selectors = [
      '.job-description',
      '.description__text',
      '.show-more-less-html__markup',
      '.job-view-layout .description__text',
      '[data-job-description]',
      '.job-description__content',
      '.job-details',
      '.position-description',
      '.job-summary',
      '.job-description__text',
      '.job-details__description',
      '.job-posting__description',
      '.job-content',
      '.job-body',
      '.description',
      '.content',
      'main',
      'article'
    ];
    
    for (const selector of selectors) {
      const element = $(selector);
      if (element.length > 0) {
        jobText = element.text().trim();
        break;
      }
    }
    
    // Fallback: body text'ten job-related content √ßƒ±kar
    if (!jobText) {
      const bodyText = $('body').text();
      jobText = extractJobContent(bodyText);
    }
    
    // Clean up the text
    jobText = cleanJobText(jobText);
    
    if (jobText.length < 100) {
      console.log('‚ö†Ô∏è Job description too short, using test data');
      return TEST_JOB_DESCRIPTION;
    }
    
    return jobText;
  } catch (error) {
    console.error('‚ùå Scraping error:', error.message);
    console.error('‚ùå Error type:', error.code || 'UNKNOWN');
    console.error('‚ùå Status:', error.response?.status || 'NO_RESPONSE');
    
    // Eƒüer 403, 429, 503 gibi bot korumasƒ± varsa
    if (error.response?.status === 403 || error.response?.status === 429 || error.response?.status === 503) {
      console.log('üõ°Ô∏è Bot protection detected, using test data');
    }
    
    return TEST_JOB_DESCRIPTION;
  }
}

// LinkedIn i√ßin √∂zel scraping fonksiyonu
async function scrapeLinkedInJob(url) {
  try {
    // LinkedIn job ID'sini √ßƒ±kar
    const jobIdMatch = url.match(/currentJobId=(\d+)/);
    if (!jobIdMatch) {
      return TEST_JOB_DESCRIPTION;
    }
    
    const jobId = jobIdMatch[1];
    
    // LinkedIn API endpoint'i (simulated)
    const apiUrl = `https://www.linkedin.com/jobs-guest/jobs/api/jobPosting/${jobId}`;
    
    const response = await axios.get(apiUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'en-US,en;q=0.9',
        'Referer': 'https://www.linkedin.com/'
      },
      timeout: 15000
    });

    const $ = cheerio.load(response.data);
    
    // LinkedIn job description selectors
    const descriptionSelectors = [
      '.description__text',
      '.show-more-less-html__markup',
      '.job-description__content',
      '.job-description',
      '[data-job-description]'
    ];
    
    let jobText = '';
    
    for (const selector of descriptionSelectors) {
      const element = $(selector);
      if (element.length > 0) {
        jobText = element.text().trim();
        break;
      }
    }
    
    // Fallback: t√ºm text'i al ve job-related content'i √ßƒ±kar
    if (!jobText) {
      const fullText = $('body').text();
      jobText = extractJobContent(fullText);
    }
    
    jobText = cleanJobText(jobText);
    
    console.log('üìä LinkedIn extracted length:', jobText.length);
    
    if (jobText.length < 100) {
      console.log('‚ö†Ô∏è LinkedIn content too short, using test data');
      return TEST_JOB_DESCRIPTION;
    }
    
    return jobText;
  } catch (error) {
    console.error('‚ùå LinkedIn scraping error:', error.message);
    console.log('üîÑ Using test job description as fallback');
    return TEST_JOB_DESCRIPTION;
  }
}

// Job content extraction helper
function extractJobContent(text) {
  // Job-related keywords'leri ara
  const jobKeywords = [
    'responsibilities', 'requirements', 'qualifications', 'experience',
    'skills', 'duties', 'job description', 'position', 'role',
    'responsibilities', 'requirements', 'qualifications', 'experience',
    'skills', 'duties', 'job description', 'position', 'role'
  ];
  
  const lines = text.split('\n');
  const jobLines = [];
  
  for (const line of lines) {
    const lowerLine = line.toLowerCase();
    if (jobKeywords.some(keyword => lowerLine.includes(keyword))) {
      jobLines.push(line);
    }
  }
  
  return jobLines.join('\n');
}

// Text cleaning helper
function cleanJobText(text) {
  // Daha yumu≈üak temizlik - sadece fazla bo≈üluklarƒ± temizle
  return text
    .replace(/\s+/g, ' ')  // Fazla bo≈üluklarƒ± tek bo≈üluƒüa √ßevir
    .replace(/\n+/g, '\n') // Fazla satƒ±r sonlarƒ±nƒ± tek satƒ±r sonuna √ßevir
    .trim();
}

// Uygulama ba≈ülangƒ±cƒ±nda agent'larƒ± ba≈ülat
async function initializeAgents() {
  try {
    console.log('ü§ñ Agent\'lar ba≈ülatƒ±lƒ±yor...');
    
    // Varsayƒ±lan agent'larƒ± ba≈ülat
    await customAgentManager.initializeDefaultAgents();
    
    console.log('‚úÖ Agent\'lar ba≈üarƒ±yla ba≈ülatƒ±ldƒ±');
    console.log('üìã Kayƒ±tlƒ± agent\'lar:', customAgentManager.getRegisteredAgents());
    
  } catch (error) {
    console.error('‚ùå Agent ba≈ülatma hatasƒ±:', error);
    // Hatayƒ± yeniden fƒ±rlat ki server ba≈ülatƒ±lmasƒ±n
    throw error;
  }
}

// API Routes

// Legacy routes for backward compatibility
app.post("/api/scrape-job", async (req, res) => {
  try {
    const { url } = req.body;
    
    console.log('üîç Scrape request received for URL:', url);
    
    if (!url) {
      console.log('‚ùå No URL provided');
      return res.status(400).json({ 
        success: false, 
        message: "URL gerekli" 
      });
    }
    
    console.log('üöÄ Starting scraping process...');
    const jobText = await scrapeJobFromUrl(url);
    
    // Kelime sayƒ±sƒ±nƒ± hesapla
    const words = jobText?.split(/\s+/) || [];
    const filteredWords = words.filter(word => word.length > 0);
    const wordCount = filteredWords.length;
    
    console.log('‚úÖ Scraping completed successfully');
    console.log('üìä Text length:', jobText?.length || 0);
    console.log('üìä Word count:', wordCount);
    
    res.json({
      success: true,
      jobText: jobText,
      message: "ƒ∞≈ü ilanƒ± ba≈üarƒ±yla √ßekildi",
      textLength: jobText.length,
      wordCount: wordCount,
      sampleText: jobText.substring(0, 200) + '...'
    });
  } catch (error) {
    console.error('‚ùå Scrape endpoint error:', error);
    console.error('‚ùå Error stack:', error.stack);
    res.status(500).json({ 
      success: false, 
      message: error.message,
      error: error.toString(),
      stack: error.stack
    });
  }
});

// Analysis endpoint for frontend compatibility
app.post("/api/analyze", async (req, res) => {
  try {
    const { jobText, resumeText } = req.body;
    
    console.log('üîç Analysis request received');
    console.log('üìä Job text length:', jobText?.length || 0);
    console.log('üìÑ Resume text length:', resumeText?.length || 0);
    
    if (!jobText || !resumeText) {
      return res.status(400).json({ 
        success: false, 
        message: "Job text ve resume text gerekli" 
      });
    }
    
    // Use agent for analysis
    const result = await customAgentManager.quickCvAnalysis(resumeText, jobText, 'comprehensive');
    
    console.log('‚úÖ Analysis completed successfully');
    
    res.json({
      success: true,
      analysis: result
    });
  } catch (error) {
    console.error('‚ùå Analysis endpoint error:', error);
    res.status(500).json({ 
      success: false, 
      message: error.message
    });
  }
});

// CV Analysis Agent endpoint (Klasik)
app.post("/api/agents/cv-analysis", async (req, res) => {
  try {
    const { cvText, jobText, analysisType = 'comprehensive' } = req.body;
    
    if (!cvText) {
      return res.status(400).json({ 
        success: false, 
        message: "CV metni gerekli" 
      });
    }
    
    console.log('üîç CV analizi isteƒüi alƒ±ndƒ± (Klasik)');
    console.log('üìä CV uzunluƒüu:', cvText.length);
    console.log('üìä Job uzunluƒüu:', jobText?.length || 0);
    
    const result = await customAgentManager.quickCvAnalysis(cvText, jobText, analysisType);
    
    res.json({
      success: true,
      result: result,
      message: 'CV analizi tamamlandƒ± (Klasik)'
    });
  } catch (error) {
    console.error('CV Analysis endpoint error:', error);
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
});

// ReAct CV Analysis Agent endpoint (Geli≈ümi≈ü)
app.post("/api/agents/react-cv-analysis", async (req, res) => {
  try {
    const { cvText, jobText, analysisType = 'comprehensive' } = req.body;
    
    if (!cvText) {
      return res.status(400).json({ 
        success: false, 
        message: "CV metni gerekli" 
      });
    }
    
    console.log('üß† ReAct CV analizi isteƒüi alƒ±ndƒ±');
    console.log('üìä CV uzunluƒüu:', cvText.length);
    console.log('üìä Job uzunluƒüu:', jobText?.length || 0);
    
    // ReAct agent'ƒ±nƒ± √ßalƒ±≈ütƒ±r
    const result = await customAgentManager.runAgent('react-cv-analyzer', {
      cvText: cvText,
      jobText: jobText
    }, {
      analysisType: analysisType,
      task: 'CV ve i≈ü ilanƒ± analizi',
      enableLearning: true,
      enableReflection: true
    });
    
    res.json({
      success: true,
      result: result.result,
      metadata: result.metadata,
      message: 'ReAct CV analizi tamamlandƒ±'
    });
    
  } catch (error) {
    console.error('‚ùå ReAct CV analizi hatasƒ±:', error);
    res.status(500).json({ 
      success: false, 
      message: 'ReAct CV analizi sƒ±rasƒ±nda hata olu≈ütu',
      error: error.message 
    });
  }
});

// Application Assistant Agent endpoint
app.post("/api/agents/application-analysis", async (req, res) => {
  try {
    const { 
      cvText, 
      jobText, 
      companyInfo = '', 
      location = '', 
      analysisType = 'comprehensive' 
    } = req.body;
    
    if (!cvText || !jobText) {
      return res.status(400).json({ 
        success: false, 
        message: "CV ve i≈ü ilanƒ± metni gerekli" 
      });
    }
    
    const result = await customAgentManager.applicationAnalysis(
      cvText, 
      jobText, 
      companyInfo, 
      location, 
      analysisType
    );
    
    res.json(result);
  } catch (error) {
    console.error('Application Analysis endpoint error:', error);
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
});

// Agent management endpoints
app.get("/api/agents/list", (req, res) => {
  try {
    const agents = customAgentManager.getRegisteredAgents();
    const status = customAgentManager.getSystemStatus();
    
    res.json({
      success: true,
      agents: agents,
      systemStatus: status,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error("‚ùå Agent listesi hatasƒ±:", error);
    res.status(500).json({ 
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

app.get("/api/agents/status", (req, res) => {
  try {
    const status = customAgentManager.getSystemStatus();
    const performance = customAgentManager.getPerformanceStats();
    
    res.json({
      success: true,
      systemStatus: status,
      performance: performance,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error("‚ùå Agent durum hatasƒ±:", error);
    res.status(500).json({ 
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

app.get("/api/agents/history", (req, res) => {
  try {
    const { agent, limit } = req.query;
    const filters = {};
    
    if (agent) filters.agent = agent;
    if (limit) filters.limit = parseInt(limit);
    
    const history = customAgentManager.getHistory(filters);
    
    res.json({
      success: true,
      history: history,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error("‚ùå Ge√ßmi≈ü alma hatasƒ±:", error);
    res.status(500).json({ 
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

app.delete("/api/agents/history", (req, res) => {
  try {
    customAgentManager.clearHistory();
    
    res.json({
      success: true,
      message: "Konu≈üma ge√ßmi≈üi temizlendi",
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error("‚ùå Ge√ßmi≈ü temizleme hatasƒ±:", error);
    res.status(500).json({ 
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.json({
    status: "healthy",
    timestamp: new Date().toISOString(),
    agents: customAgentManager.getSystemStatus()
  });
});

// Root endpoint
app.get("/", (req, res) => {
  res.json({
    message: "InterMatch AI Backend API",
    version: "2.0.0",
    status: "running",
    endpoints: {
      health: "/api/health",
      scrape: "/api/scrape-job",
      cvAnalysis: "/api/agents/cv-analysis",
      applicationAnalysis: "/api/agents/application-analysis",
      agents: "/api/agents/list",
      status: "/api/agents/status",
      history: "/api/agents/history"
    },
    timestamp: new Date().toISOString()
  });
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('‚ùå Server error:', error);
  res.status(500).json({
    error: "Internal server error",
    message: error.message,
    timestamp: new Date().toISOString()
  });
});

// T√ºm uygulamayƒ± ba≈ülatan ana asenkron fonksiyon
async function startServer() {
  try {
    console.log('üöÄ InterMatch Backend ba≈ülatƒ±lƒ±yor...');
    
    // 1. √ñNCE t√ºm hazƒ±rlƒ±klarƒ±n bitmesini BEKLE
    await initializeAgents();
    
    // 2. HAZIRLIKLAR Bƒ∞TTƒ∞KTEN SONRA sunucuyu dinlemeye ba≈üla
    const PORT = process.env.PORT || 8081;
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ InterMatch Backend API √ßalƒ±≈üƒ±yor: http://localhost:${PORT}`);
        console.log(`üìã Endpoints:`);
  console.log(`   GET  / - API bilgileri`);
  console.log(`   GET  /api/health - Sistem durumu`);
  console.log(`   POST /api/scrape-job - URL'den i≈ü ilanƒ± √ßek`);
  console.log(`   POST /api/agents/cv-analysis - CV analizi (Klasik)`);
  console.log(`   POST /api/agents/react-cv-analysis - CV analizi (ReAct)`);
  console.log(`   POST /api/agents/application-analysis - Ba≈üvuru asistanƒ±`);
  console.log(`   GET  /api/agents/list - Agent'larƒ± listele`);
  console.log(`   GET  /api/agents/status - Sistem durumu`);
  console.log(`   GET  /api/agents/history - Ge√ßmi≈ü`);
    });
    
  } catch (error) {
    // 3. Hazƒ±rlƒ±k sƒ±rasƒ±nda bir hata olursa YAKALA ve g√∂ster
    console.error('!! SUNUCU BA≈ûLATILAMADI !! KRƒ∞Tƒ∞K HATA:', error);
    console.error('Hata detayƒ±:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1); // Uygulamayƒ± bilin√ßli olarak sonlandƒ±r
  }
}

// Ana fonksiyonu √ßaƒüƒ±rarak uygulamayƒ± ba≈ülat
startServer(); 